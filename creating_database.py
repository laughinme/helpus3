import sqlite3
import asyncio
import json
import requests
import datetime
from bs4 import BeautifulSoup
import hashlib
requests.packages.urllib3.disable_warnings()

def compute_hash(data: dict):
    """Compute MD5 hash of the data."""
    m = hashlib.md5()
    m.update(str(data).encode('utf-8'))
    return m.hexdigest()

async def refresh_databases(content: dict | None = None, path=None) -> None:
    """
    Refreshing school schedule without applying exchanges.
    This function uses only CLASS_SCHEDULE from json to build database
    
    Args:
        - content (dict): already transformed json string to python dictionary
        - path (bool): if you want to parse schedule from local file, you can provide path to it 
    
    Returns:
        actually nothing, but it creates database "school_schedule.db"
    """
    print('Refreshing database...')


    if content == None:
        if path:
            with open(path, 'r', encoding='utf-8') as file:
                try:
                    content = json.load(file)
                except Exception as e:
                    print(e)
                    content = json.loads(str(file.read().split("=", 1)[1].strip().rstrip(";"))) # remove odd js file elements

        else:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ JSON —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ–≥–æ –∑–∞—á–µ–º-—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è—é—Ç)
            url = 'https://lyceum.nstu.ru/rasp/m.schedule.html'

            html_text = requests.get(url, verify=False).text

            soup = BeautifulSoup(html_text, 'lxml')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ JSON —Ñ–∞–π–ª
            ad = soup.find_all('script', type='text/javascript')
            srcs = [_.get('src') for _ in ad]
            httpsAddress = f'https://lyceum.nstu.ru/rasp/{[src for src in srcs if str(src).startswith("nika_data")][0]}'

            try:
                response = requests.get(url=httpsAddress, verify=False)
            except Exception as error:
                print(f'https didnt work: {error}\nTrying to connect with http')
                response = requests.get(url=f'http://lyceum.nstu.ru/rasp/{[src for src in srcs if str(src).startswith("nika_data")][0]}', verify=False)
            else:
                print(f'https worked:\n{httpsAddress}')
            finally:
                print('finished parsing!')

            if response.status_code == 200:
                content = json.loads(response.text.split("=", 1)[1].strip().rstrip(";"))
   
    databases = ['school_schedule.db']
    for base_name in databases:
        conn = sqlite3.connect(base_name)
        cur = conn.cursor()

        cur.execute(f'DROP TABLE IF EXISTS "classes"')
        # Create table for classes
        cur.execute('''
        CREATE TABLE IF NOT EXISTS classes (
            id TEXT,
            class_name TEXT
        )
        ''')

        for number, classes in content['CLASSES'].items():
            cur.execute('INSERT OR IGNORE INTO classes (id, class_name) VALUES (?, ?)', (number, classes,))
            
        cur.execute(f'DROP TABLE IF EXISTS "classrooms"')

        # Create table for classrooms
        cur.execute('''
        CREATE TABLE IF NOT EXISTS classrooms (
            id TEXT,
            room TEXT
        )
        ''')
        

        for id, room in content["ROOMS"].items():
            cur.execute(f'INSERT OR IGNORE INTO classrooms (id, room) VALUES (?, ?)', (id, room))
            

        cur.execute(f'DROP TABLE IF EXISTS "lessons"')
        

        cur.execute('''CREATE TABLE IF NOT EXISTS lessons (
            id TEXT,
            lesson_name TEXT,
            emojiName TEXT
        )''')


        emojis = {
            '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å': '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å üï∂Ô∏è',
            '–ê–ª–≥–µ–±—Ä–∞': '–ê–ª–≥–µ–±—Ä–∞ ‚ûó',
            '–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ—à–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ...': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ—à–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ... üíπ',
            '–ë–∏–æ–ª–æ–≥–∏—è': '–ë–∏–æ–ª–æ–≥–∏—è ü¶ã',
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç',
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ù–°–û': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ù–°–û üåè',
            '–ì–µ–æ–º–µ—Ç—Ä–∏—è': '–ì–µ–æ–º–µ—Ç—Ä–∏—è üìê',
            '–ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–µ —á–µ—Ä—á–µ–Ω–∏–µ': '–ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–µ —á–µ—Ä—á–µ–Ω–∏–µ üñãÔ∏è',
            '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫...': '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫... üî¢',
            '–ò–∑–æ': '–ò–∑–æ üé®',
            '–ò–Ω.—è–∑': '–ò–Ω.—è–∑ üá∫üá∏',
            '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç üîç',
            '–ò–Ω–∂–µ–Ω–µ—Ä –∞–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø...': '–ò–Ω–∂–µ–Ω–µ—Ä –∞–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø... ‚úàÔ∏è',
            '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞': '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ üìä',
            '–ò–Ω—Ñ–æ–ö–£–†–°': '–ò–Ω—Ñ–æ–ö–£–†–° üíª',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíæ',
            '–ò—Å–∫—É—Å—Å—Ç–≤–æ': '–ò—Å–∫—É—Å—Å—Ç–≤–æ üé≠',
            '–ò—Å—Ç–æ—Ä–∏—è': '–ò—Å—Ç–æ—Ä–∏—è üìú',
            '–ò–¢ —Ñ–∏–∑–∏–∫–∞': '–ò–¢ —Ñ–∏–∑–∏–∫–∞ ‚öõÔ∏è',
            '–ò–¢ —ç–∫–æ–Ω–æ–º–∏–∫–∞': '–ò–¢ —ç–∫–æ–Ω–æ–º–∏–∫–∞ üí∞',
            '–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å': '–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å üïí',
            '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üí¨',
            '–ö–ü –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ': '–ö–ü –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ üßÆ',
            '–ö—É–ª—å—Ç—É—Ä–∞ –Ø–ø–æ–Ω–∏–∏': '–ö—É–ª—å—Ç—É—Ä–∞ –Ø–ø–æ–Ω–∏–∏ üáØüáµ',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ—á—Ç–µ–Ω–∏–µ': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ—á—Ç–µ–Ω–∏–µ üìñ',
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ üî¢',
            '–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑...': '–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑... üß¨',
            '–ú—É–∑—ã–∫–∞': '–ú—É–∑—ã–∫–∞ üéµ',
            '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è': '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è üåå',
            '–ù–∞–≥–ª—è–¥–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è': '–ù–∞–≥–ª—è–¥–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è üìè',
            '–ù–∞—à –∫—Ä–∞–π –°–∏–±–∏—Ä—å': '–ù–∞—à –∫—Ä–∞–π –°–∏–±–∏—Ä—å üêª',
            '–û–ë–ñ': '–û–ë–ñ üöí',
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ üë•',
            '–û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä': '–û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä üå≥',
            '–û–ª–∏–º–ø–∏–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '–û–ª–∏–º–ø–∏–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ü•á',
            '–û–õ–∏–°–ö': '–û–õ–∏–°–ö üè´',
            '–û–†–ö–°–≠': '–û–†–ö–°–≠ üìä',
            '–û—Å–Ω–æ–≤—ã 3–î –º–æ–¥–µ–¥–∏—Ä–æ–≤–∞–Ω–∏—è': '–û—Å–Ω–æ–≤—ã 3–î –º–æ–¥–µ–¥–∏—Ä–æ–≤–∞–Ω–∏—è üñ•Ô∏è',
            '–û—Å–Ω–æ–≤—ã –∞–≤–∏–∞–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è': '–û—Å–Ω–æ–≤—ã –∞–≤–∏–∞–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è ‚úàÔ∏è',
            '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏': '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ üíª',
            '–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏': '–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ üí≥',
            '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–∏–æ–ª–æ–≥–∏—è': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –±–∏–æ–ª–æ–≥–∏—è üî¨',
            '–ü—Ä–µ–¥–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞': '–ü—Ä–µ–¥–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ üìö',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ö—É–º–∏—Ä': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ö—É–º–∏—Ä üñ•Ô∏è',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∞': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∞ üíª',
            '–ü—Ä–æ–≥—Ä–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python': '–ü—Ä–æ–≥—Ä–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python üêç',
            '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è': '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üß†',
            '–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º': '–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º üí¨',
            '–†–µ—à–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö –∑–∞–¥–∞—á': '–†–µ—à–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö –∑–∞–¥–∞—á üèÜ',
            '–†–µ—à–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö –∑–∞–¥–∞—á –ø...': '–†–µ—à–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö –∑–∞–¥–∞—á –ø... üèÜ',
            '–†–∏—Ç–æ—Ä–∏–∫–∞': '–†–∏—Ç–æ—Ä–∏–∫–∞ üó£Ô∏è',
            '–†–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (—Ä—É—Å—Å–∫–∞—è)': '–†–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (—Ä—É—Å—Å–∫–∞—è) üìö',
            '–†–æ–¥–Ω–æ–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π)': '–†–æ–¥–Ω–æ–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π) üìù',
            '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫',
            '–°–ø–µ—Ü –∫—É—Ä—Å –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ': '–°–ø–µ—Ü –∫—É—Ä—Å –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ üíπ',
            '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è üìñ',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üó£Ô∏è',
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è üîß',
            '–¢–µ—Ö–Ω–æ–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ': '–¢–µ—Ö–Ω–æ–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ üíº',
            '–§–∏–∑–∏–∫–∞': '–§–∏–∑–∏–∫–∞ ‚öõÔ∏è',
            '–§–∏–∑–∏–∫–∞ –ª–∞–±': '–§–∏–∑–∏–∫–∞ –ª–∞–± üß™',
            '–§–∏–∑–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞': '–§–∏–∑–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ üß≤',
            '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞': '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ üèÉ‚Äç‚ôÇÔ∏è',
            '–•–∏–º–∏—è': '–•–∏–º–∏—è üî¨',
            '–•–∏–º–∏—è –æ—Ç —Ç–µ–æ—Ä–∏–∏ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ': '–•–∏–º–∏—è –æ—Ç —Ç–µ–æ—Ä–∏–∏ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ üß™',
            '–•–∏–º–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '–•–∏–º–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞ üî¨',
            '–≠–∫–æ–ª–æ–≥–∏—è': '–≠–∫–æ–ª–æ–≥–∏—è üåø',
            '–≠–∫–æ–Ω–æ–º–∏–∫–∞': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ üíπ',
            '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–∑–∏–∫–∞': '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ üî¨',
            '–≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏': '–≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ üß†',
            '–Æ–Ω—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–æ–∏—Å–ø—ã—Ç–∞—Ç–µ–ª–∏': '–Æ–Ω—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–æ–∏—Å–ø—ã—Ç–∞—Ç–µ–ª–∏ üå±',
            '–Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫': '–Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ üáØüáµ',
            '–£–ü–ö': '–£–ü–ö üìö',
            '–ë–∞—Å—Å–µ–π–Ω': '–ë–∞—Å—Å–µ–π–Ω üèä‚Äç‚ôÇÔ∏è',
            '–¢–µ–∞—Ç—Ä': '–¢–µ–∞—Ç—Ä üé≠',
            '–û–±–µ–¥': '–û–±–µ–¥ üçΩÔ∏è',
            '–≠–∫—Å–∫—É—Ä—Å–∏—è': '–≠–∫—Å–∫—É—Ä—Å–∏—è üöå'
        }

        for id, lesson in content["SUBJECTS"].items():
            if lesson in emojis: emj = emojis[lesson]
            else: emj = lesson
            cur.execute(f'INSERT OR IGNORE INTO lessons (id, lesson_name, emojiName) VALUES (?, ?, ?)', (id, lesson, emj))
            

        cur.execute(f"DROP TABLE IF EXISTS days")
        

        # Create table for days
        cur.execute('''
        CREATE TABLE IF NOT EXISTS days (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            day_name TEXT
        )
        ''')

        # Prepopulate days table with the names of the days
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        for day in days:
            cur.execute(f'INSERT OR IGNORE INTO days (day_name) VALUES ("{day}")')


        cur.execute('''DROP TABLE IF EXISTS "updates_message_storage"''')

        # Period for schedule
        cur.execute('DROP TABLE IF EXISTS period')
        cur.execute('''
        CREATE TABLE IF NOT EXISTS period (
            prefix TEXT,
            value
        )''')   

        period = next(iter(content["PERIODS"]))

        for key, value in content["PERIODS"][period].items():
            cur.execute(f'''INSERT OR IGNORE INTO period (prefix, value) VALUES ("{key}", "{value}")''')

        
        cur.execute(f"DROP TABLE IF EXISTS data_hash")
     
        # Hash storage to know when it's time to update schedule
        cur.execute('''
        CREATE TABLE IF NOT EXISTS data_hash (
            id INTEGER PRIMARY KEY,
            hash_value TEXT
        )
        ''')
        cur.execute(f'INSERT INTO data_hash (id, hash_value) VALUES (1, ?)', (compute_hash(content['CLASS_SCHEDULE']),))
        

        cur.execute(f"DROP TABLE IF EXISTS groups")
        

        cur.execute(f'CREATE TABLE IF NOT EXISTS groups (id TEXT, group_name TEXT)')

        for group_number, group_name in content['CLASSGROUPS'].items():
            cur.execute(f'INSERT OR IGNORE INTO groups (id, group_name) VALUES (?, ?)', (group_number, group_name))
            

        cur.execute(f"DROP TABLE IF EXISTS pair_times")
        cur.execute(f'CREATE TABLE IF NOT EXISTS pair_times (lessons_inclued TEXT, pair_time TEXT)')
        pairs = {
            '1-2': '8:30-10:00',
            '3-4': '10:15-11:45',
            '5-6': '12:10-13:40',
            '7-8': '14:00-15:30',
            '9-10': '15:45-17:15'
        }
        for lessons, pair_time in pairs.items():
            cur.execute(f'INSERT OR IGNORE INTO pair_times (lessons_inclued, pair_time) VALUES (?, ?)', (lessons, pair_time))
  

        cur.execute('SELECT class_name FROM classes')
        classes = [i[0] for i in cur.fetchall()]

        to_remove  = []
        for class_name in classes:

            if list(filter(lambda x: content["CLASSES"][x] == class_name, content["CLASSES"]))[0] not in [grade for grade in content["CLASS_SCHEDULE"] [list(content['PERIODS'].keys())[0]]]:
                to_remove.append(class_name)
                print('to remove:', to_remove)  # Removing classes, that are 
                
        for i in to_remove:
            classes.remove(i)

        for class_name in classes:
            # cur.execute("SELECT id FROM 'classes' WHERE class_name=?", (class_name,))
            # class_id = int(list(cur.fetchone())[0])
            # print(class_name, class_id)

            cur.execute(f'DROP TABLE IF EXISTS "{class_name}"')
            

            cur.execute(f'''
            CREATE TABLE IF NOT EXISTS "{class_name}" (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                day_name TEXT,
                lesson_number INTEGER,
                lesson_name TEXT,
                teacher_name TEXT,
                start_time TEXT,
                end_time TEXT,
                classroom TEXT,
                group_name TEXT,
                non_original TEXT
            )
            ''')

            
            cur.execute("SELECT id FROM 'days'")
            day_ids = [i[0] for i in cur.fetchall()]

            for day_id in day_ids:

                cur.execute("SELECT day_name FROM 'days' WHERE id=?", (day_id,))
                day_name = cur.fetchone()[0]

                lessons_og = content["CLASS_SCHEDULE"] [list(content['PERIODS'].keys())[0]] [list(filter(lambda x: content["CLASSES"][x] == class_name, content["CLASSES"]))[0]]
                
                lessons = [lessons_og[key] for key in lessons_og if key.startswith(str(day_id))]
                lesson_num_unindex = [key for key in lessons_og if key.startswith(str(day_id))]

                def weekday_lessons_construction(day: list,
                                                content: dict | None = content,
                                                capitalize: bool | None = False) -> None:
                    
                    lessons_index, teacher_index, cabinet_index, groups_index = list(), list(), list(), list()

                    subject_names = list()

                    for elem in day:
                        if len(elem['s']) == 1:
                            lessons_index.append(elem['s'][0])
                            teacher_index.append(elem['t'][0])
                            cabinet_index.append(elem['r'][0])
                        else:
                            lessons_index.append(elem['s'])
                            teacher_index.append(elem['t'])
                            cabinet_index.append(elem['r'])
                            groups_index.append(elem['g'])

                    # This is the full version of the code:
                    for lesson in lessons_index:
                        if isinstance(lesson, str):
                            subject_names.append(content['SUBJECTS'][lesson])
                        elif isinstance(lesson, list):
                            subject_names.append([content['SUBJECTS'][i] if i != '' else None for i in lesson])

                    # This is a shortened version of the same code 
                    teachers_names = [content['TEACHERS'][teacher] if isinstance(teacher, str) else [content['TEACHERS'][i] if i != '' else None for i in teacher] for teacher in teacher_index]
                    cabinets = [content['ROOMS'][cabinet] if isinstance(cabinet, str) else [content['ROOMS'][i] if i != '' else None for i in cabinet] for cabinet in cabinet_index]
                    groups = [[content['CLASSGROUPS'][i] for i in group] for group in groups_index] if groups_index else None

                    groupsindex = -1
                    for index, subject in enumerate(subject_names):
                        if lesson_num_unindex[index][1] != '0':
                            lesson_number = lesson_num_unindex[index][1:]
                        else:
                            lesson_number = lesson_num_unindex[index][2]

                        if isinstance(subject, list):
                            
                            groupsindex+=1
                            for i, lesson in enumerate(subject):

                                lesson_name = lesson
                                teacher_name = teachers_names[index][i]

                                group_name = groups[groupsindex][i]
                                if group_name == '1 –≥—Ä—É–ø–ø–∞':
                                    group_name = '–ì—Ä—É–ø–ø–∞ 1'
                                elif group_name == '2 –≥—Ä—É–ø–ø–∞':
                                    group_name = '–ì—Ä—É–ø–ø–∞ 2'

                                classroom = cabinets[index][i]

                                if class_name.startswith(('9', '10', '11')):

                                    #pairCheckNum!!!!!!!!!! = lesson_number

                                    if index == 0:
                                        previous_lessons = []
                                    else:
                                        previous_lessons = [subject_names[index-1][i], teachers_names[index-1][i], cabinets[index-1][i]]

                                    current_lesson = [lesson_name, teacher_name, classroom]

                                    if index == len(subject_names)-1:
                                        next_lessons = []
                                    else:
                                        next_lessons = [subject_names[index+1][i], teachers_names[index+1][i], cabinets[index+1][i]]


                                    if current_lesson in next_lessons or (next_lessons and teacher_name == next_lessons[1]):

                                        cur.execute(f'SELECT lessons_inclued, pair_time FROM pair_times WHERE lessons_inclued LIKE "%{lesson_number}%"')
                                        lessons_included, pair_time = cur.fetchone()
                                        
                                        if lesson_number == lessons_included.split('-')[-1]:
                                            start_time = content['LESSON_TIMES'][lesson_number][0]
                                            end_time = (datetime.datetime.strptime(start_time, '%H:%M') + datetime.timedelta(hours=1.5)).strftime('%H:%M')

                                        else:
                                            start_time = pair_time.split('-')[0]
                                            end_time = pair_time.split('-')[1]
                    
                                    elif current_lesson in previous_lessons or (previous_lessons and teacher_name == previous_lessons[1]):

                                        cur.execute(f'SELECT lessons_inclued, pair_time FROM pair_times WHERE lessons_inclued LIKE "%{lesson_number}%"')
                                        lessons_included, pair_time = cur.fetchone()

                                        if lesson_number == lessons_included.split('-')[0]:
                                            start_time = content['LESSON_TIMES'][str(int(lesson_number)-1)][0]
                                            end_time = (datetime.datetime.strptime(start_time, '%H:%M') + datetime.timedelta(hours=1.5)).strftime('%H:%M')

                                        else:
                                            start_time = pair_time.split('-')[0]
                                            end_time = pair_time.split('-')[1]
                                else:
                                    start_time = content['LESSON_TIMES'][lesson_number][0]
                                    end_time = content['LESSON_TIMES'][lesson_number][1]


                                cur.execute(f'''INSERT INTO "{class_name}" (day_name, lesson_number, lesson_name, teacher_name, start_time, end_time, classroom, group_name) 
                                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', 
                                            (day_name, lesson_number, lesson_name, teacher_name, start_time, end_time, classroom, group_name))
                                
            
                        else:
                            lesson_name = subject
                            teacher_name = teachers_names[index]
                            classroom = cabinets[index]
                            group_name = None


                            if class_name.startswith(('9', '10', '11')):

                                # print(lesson_num_unindex, pairCheckNum, 'yes')

                                if index == 0:
                                    previous_lesson = []
                                else:
                                    previous_lesson = [subject_names[index-1], teachers_names[index-1], cabinets[index-1]]

                                current_lesson = [lesson_name, teacher_name, classroom]

                                if index == len(subject_names)-1:   
                                    next_lesson = []
                                else:
                                    next_lesson = [subject_names[index+1], teachers_names[index+1], cabinets[index+1]]

                                if current_lesson == next_lesson or (next_lesson and teacher_name == next_lesson[1]):

                                    cur.execute(f'SELECT lessons_inclued, pair_time FROM pair_times WHERE lessons_inclued LIKE "%{lesson_number}%"')
                                    lessons_included, pair_time = cur.fetchone()

                                    if lesson_number == lessons_included.split('-')[1] and not (current_lesson == previous_lesson or (previous_lesson and teacher_name == previous_lesson[1])):
                                        start_time = content['LESSON_TIMES'][lesson_number][0]
                                        end_time = (datetime.datetime.strptime(start_time, '%H:%M') + datetime.timedelta(hours=1.5)).strftime('%H:%M')

                                    else:
                                        start_time = pair_time.split('-')[0]
                                        end_time = pair_time.split('-')[1]

                                elif current_lesson == previous_lesson or (previous_lesson and teacher_name == previous_lesson[1]):

                                    cur.execute(f'SELECT lessons_inclued, pair_time FROM pair_times WHERE lessons_inclued LIKE "%{lesson_number}%"')
                                    lessons_included, pair_time = cur.fetchone()

                                    if lesson_number == lessons_included.split('-')[0] and not (current_lesson == next_lesson or (next_lesson and teacher_name == next_lesson[1])):
                                        start_time = content['LESSON_TIMES'][str(int(lesson_number)-1)][0]
                                        end_time = (datetime.datetime.strptime(start_time, '%H:%M') + datetime.timedelta(hours=1.5)).strftime('%H:%M')

                                    else:
                                        start_time = pair_time.split('-')[0]
                                        end_time = pair_time.split('-')[1]
                                else:

                                    start_time = content['LESSON_TIMES'][lesson_number][0]
                                    end_time = content['LESSON_TIMES'][lesson_number][1]

                            else:
                                start_time = content['LESSON_TIMES'][lesson_number][0]
                                end_time = content['LESSON_TIMES'][lesson_number][1]


                            cur.execute(f'''INSERT INTO "{class_name}" (day_name, lesson_number, lesson_name, teacher_name, start_time, end_time, classroom, group_name) 
                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', 
                                        (day_name, lesson_number, lesson_name, teacher_name, start_time, end_time, classroom, group_name))
                            
                weekday_lessons_construction(lessons)
        conn.commit()
        conn.close()


if __name__ == '__main__':
    asyncio.run(refresh_databases(path='additional/nika.json'))